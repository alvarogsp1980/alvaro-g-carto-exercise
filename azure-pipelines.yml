trigger:
 - develop
 - qa
 - production

pool:
  vmImage: ubuntu-latest # Remember to mention in README.md which software is included here to keep in mind. (https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md)

variables:
- name: dockerfile
  value: '$(Build.SourcesDirectory)/local-dev/Dockerfile'  # Cambia la ruta según la ubicación real del Dockerfile

- name: containerName
  value: 'simple-api'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTestJob
    displayName: 'Build and Test Job'
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '>=18.10'
      displayName: 'Install Node.js'

    - task: CopyFiles@2
      inputs:
        SourceFolder: 'simple-api'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/simple-api'
      displayName: 'Copy simple-api folder'

    - script: |
        cd $(Build.ArtifactStagingDirectory)/simple-api
        npm install
        yarn install
      displayName: 'Install npm and yarn'

    - script: |
        cd $(Build.ArtifactStagingDirectory)/simple-api
        yarn run test
      displayName: 'Run Unit Tests'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: simple-api
        targetPath: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'pipeline'
      displayName: 'Publish simple-api artifact'

- stage: builddockerimage
  displayname: 'build docker image'
  jobs:
  - job: builddockerimagejob
    displayname: 'build docker image job'
    pool:
      vmimage: ubuntu-latest
    steps:
    - task: usepythonversion@0
      inputs:
        versionspec: '2.x'
        addtopath: true
    - script: |
        docker build -t $(containername):$(environment) -f $(dockerfile) .
        echo '$(gcp_credentials)' > gcp-credentials.json
      displayname: 'build docker image'
    - task: docker@2
      inputs:
        containerregistry: 'your-container-registry-service-connection'  # cambia esto por tu servicio de registro de contenedores
        repository: 'your-docker-repo-name'
        command: 'push'
        dockerfile: $(dockerfile)
        tags: |
          $(containername):$(environment)
      displayname: 'push docker image'
- stage: publishdockerimage
  displayname: 'publish docker image'
  jobs:
  - job: publishdockerimagejob
    displayname: 'publish docker image job'
    pool:
      vmimage: ubuntu-latest
    steps:
    - script: |
        docker tag $(containername):$(environment) your-container-registry.azurecr.io/$(containername):$(environment)
        docker push your-container-registry.azurecr.io/$(containername):$(environment)
      displayname: 'tag and push docker image'
